{"version":3,"sources":["editor-features/helpers/node.helper.ts"],"names":[],"mappings":"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","file":"node.helper.js","sourcesContent":["export class NodeHelper {\n\n    public static getListOfBlockTags(): string[] {\n        return ['div', 'p', 'ul'];\n    }\n\n    public static isInlineTag(tag: string): boolean {\n\n        let blockTags = NodeHelper.getListOfBlockTags();\n\n        if (blockTags.indexOf(tag) == -1) {\n            return true;\n        }\n\n        return false;\n\n    }\n\n    public static findParentByLocalName(node: Node, tag: string): Element {\n\n        if (NodeHelper.isInlineTag(node.parentElement.localName)) {\n\n            if (node.parentElement.localName == tag) {\n                return node.parentElement;\n            } else {\n                return NodeHelper.findParentByLocalName(node.parentElement, tag);\n            }\n\n        } else {\n            return undefined;\n        }\n\n    }\n\n    public static findParentByClassName(node: Node, className: string): Element {\n\n        if (NodeHelper.isInlineTag(node.parentElement.localName)) {\n\n            if (node.parentElement.classList.contains(className)) {\n                return node.parentElement;\n            } else {\n                return NodeHelper.findParentByClassName(node.parentElement, className);\n            }\n\n        } else {\n            return undefined;\n        }\n\n    }\n\n    public static findParentByLocalNameAndClassName(node: Node, tag: string, className: string): Element {\n\n        if (NodeHelper.isInlineTag(node.parentElement.localName)) {\n\n            if (node.parentElement.classList.contains(className) && node.parentElement.localName == tag) {\n                return node.parentElement;\n            } else {\n                return NodeHelper.findParentByClassName(node.parentElement, className);\n            }\n\n        } else {\n            return undefined;\n        }\n\n    }\n\n    public static haveParentWithLocalName(node: Node, tag: string): boolean {\n\n        let parentElement: Element = NodeHelper.findParentByLocalName(node, tag);\n\n        return !!parentElement;\n\n    }\n\n    public static haveParentWithClassName(node: Node, className: string): boolean {\n\n        let parentElement: Element = NodeHelper.findParentByClassName(node, className);\n\n        return !!parentElement;\n\n    }\n\n    public static haveParentWithLocalNameAndClassName(node: Node, tag: string, className: string): boolean {\n\n        let parentElement: Element = NodeHelper.findParentByLocalNameAndClassName(node, tag, className);\n\n        return !!parentElement;\n\n    }\n\n    public static findBlockParent(element: Element): Element {\n\n        if (element.parentElement.localName == 'p' || element.parentElement.localName == 'div' || element.parentElement.localName == 'li') {\n            return element.parentElement;\n        } else {\n            return NodeHelper.findBlockParent(element.parentElement);\n        }\n\n    }\n\n    public static unwrapElements(elements: any, tag: string, startOffset: number, endOffset: number): Element[] {\n\n        let currentLength: number = 0;\n\n        console.log('Action: unwrapElements');\n\n        console.log('endOffset: ' + startOffset);\n        console.log('endOffset: ' + endOffset);\n        console.log('elements.length: ' + elements.length);\n\n        for (let i: number = 0; i < elements.length; i = i + 1) {\n\n            currentLength = currentLength + elements[i].textContent.length;\n\n            console.log('Index: ' + i);\n            console.log('Current length: ' + currentLength);\n\n            if (elements[i].hasOwnProperty('localName')) {\n\n                if (elements[i].localName == tag) {\n\n                    if (currentLength >= startOffset) {\n\n                        if (currentLength - endOffset <= elements[i].textContent.length) {\n\n                            let inElementEndOffset = currentLength - endOffset;\n\n                            if (inElementEndOffset == elements[i].textContent.length) {\n                                elements[i].outerHTML = elements[i].innerHTML;\n                            } else {\n\n                            }\n\n\n                        }\n\n                    }\n\n\n                }\n\n            }\n\n\n        }\n\n        return elements;\n\n    };\n\n\n    public static wrapElements(elements: any, tag: string, startOffset: number, endOffset: number): void {\n\n        let element: Element = document.createElement(tag);\n\n        let currentLength: number = 0;\n        let elementInnerHTML: string = '';\n\n        let insertionIndex: number;\n\n        console.log('Action: wrapElements');\n\n        console.log('endOffset: ' + startOffset);\n        console.log('endOffset: ' + endOffset);\n        console.log('elements.length: ' + elements.length);\n\n\n        for (let i: number = 0; i < elements.length; i = i + 1) {\n\n            currentLength = currentLength + elements[i].textContent.length;\n\n            // if we find start element/node BLOCK START\n\n            console.log('Index: ' + i);\n            console.log('Current length: ' + currentLength);\n\n            if (currentLength - startOffset >= 0) {\n\n                console.log('Node at start offset have been found, index: ' + i);\n\n                if (currentLength - startOffset <= elements[i].textContent.length) {\n\n                    elementInnerHTML = elementInnerHTML + elements[i].textContent.slice(startOffset, endOffset);\n                    let secondPartText: string = elements[i].textContent.slice(endOffset, elements[i].textContent.length);\n                    elements[i].textContent = elements[i].textContent.slice(0, startOffset);\n\n\n                    if (secondPartText.length > 0) {\n                        insertionIndex = i;\n\n                        let secondPartNode: Node = document.createTextNode(secondPartText);\n\n                        if (i == elements.length - 1) {\n                            elements[i].parentNode.appendChild(secondPartNode)\n                        } else {\n                            elements[i].parentNode.insertBefore(secondPartNode, elements[i + 1]);\n                        }\n                    }\n\n                }\n\n                // if we find start element/node BLOCK END\n\n            } else {\n\n                console.log('Node at end offset have been found, index: ' + i);\n\n                // if we find end element/node BLOCK START\n\n                if (currentLength > endOffset) {\n\n                    if (endOffset - currentLength < elements[i].textContent.length) {\n\n                        let localElementOffset: number = endOffset - currentLength;\n\n                        insertionIndex = i;\n\n                        elementInnerHTML = elementInnerHTML + elements[i].textContent.slice(0, localElementOffset);\n                        elements[i].textContent = elements[i].textContent.slice(localElementOffset);\n\n                    }\n                }\n\n                // if we find end element/node BLOCK END\n\n                else {\n\n                    console.log('Wrapping regular node at index: ' + i);\n\n                    // add textContent or outerHTML to elementInnerHTML BLOCK START\n\n                    if (elements[i].hasOwnProperty('outerHTML')) {\n                        elementInnerHTML = elementInnerHTML + elements[i].outerHTML;\n                    } else {\n                        elementInnerHTML = elementInnerHTML + elements[i].textContent;\n                    }\n\n                    // add textContent or innerHTML to elementInnerHTML BLOCK END\n\n                }\n\n            }\n\n        }\n\n        console.log('elementInnerHTML', elementInnerHTML);\n\n        element.innerHTML = elementInnerHTML;\n\n        if (insertionIndex == elements.length - 1) {\n            elements[0].parentNode.appendChild(element);\n        } else {\n            elements[0].parentNode.insertBefore(element, elements[0].parentNode.childNodes[insertionIndex + 1]);\n        }\n\n\n    }\n\n}"]}