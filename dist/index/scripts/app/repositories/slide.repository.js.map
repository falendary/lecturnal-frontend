{"version":3,"sources":["app/repositories/slide.repository.ts"],"names":[],"mappings":"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","file":"slide.repository.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Rx';\nimport {Http, Response, Headers, RequestOptions} from '@angular/http';\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\n\nimport {IRepository} from './interfaces/IRepository';\nimport {IEntity} from '../models/interfaces/IEntity';\nimport {IQueryParameter} from '../models/interfaces/IQueryParameter';\nimport {UrlHelper} from '../helpers/url.helper';\nimport {Slide} from '../models/Slide';\nimport {CookieService} from '../services/cookie.service';\n\n@Injectable()\nexport class SlideRepository implements IRepository {\n\n\n    constructor(private http: Http) {\n    }\n\n    getList(parameters: IQueryParameter[], presentationId: number): Observable<Slide[]> {\n\n        let headers = new Headers({ 'Content-Type': 'application/json', 'authorization': 'Bearer ' + CookieService.getCookie('token') });\n        let options = new RequestOptions({ headers: headers });\n\n        let parametersString: string = '';\n\n        if (parameters) {\n            parametersString = UrlHelper.createQueryParamtersString(parameters);\n        }\n\n        return this.http.get('backend/web/v1/presentations/' + presentationId + '/slides' + parametersString, options)\n            .map((res: Response) => res.json())\n            .catch((error: any) => Observable.throw(error.json().error || 'Server error'));\n    }\n\n    getByKey(presentationId: number, slideId: number): Observable<Slide> {\n\n        let headers = new Headers({ 'Content-Type': 'application/json', 'authorization': 'Bearer ' + CookieService.getCookie('token') });\n        let options = new RequestOptions({ headers: headers });\n\n        return this.http.get('backend/web/v1/presentations/' + presentationId + '/slides/' + slideId, options)\n            .map((res: Response) => res.json())\n            .catch((error: any) => Observable.throw(error.json().error || 'Server error'));\n    }\n\n    update(item: IEntity, presentationId: number, slideId: number): Observable<Slide> {\n\n        let headers = new Headers({ 'Content-Type': 'application/json', 'authorization': 'Bearer ' + CookieService.getCookie('token') });\n        let options = new RequestOptions({ headers: headers });\n\n        return this.http.put('backend/web/v1/presentations/' + presentationId + '/slides/' + slideId, JSON.stringify(item), options)\n            .map((res: Response) => res.json())\n            .catch((error: any) => Observable.throw(error.json().error || 'Server error'));\n    }\n\n    create(item: IEntity, presentationId: number): Observable<Slide> {\n\n        let headers = new Headers({ 'Content-Type': 'application/json', 'authorization': 'Bearer ' + CookieService.getCookie('token') });\n        let options = new RequestOptions({ headers: headers });\n\n        return this.http.post('backend/web/v1/presentations/' + presentationId + '/slides', JSON.stringify(item), options)\n            .map((res: Response) => res.json())\n            .catch((error: any) => Observable.throw(error.json().error || 'Server error'));\n    }\n\n    deleteByKey(presentationId: number, slidesId: number): void {\n\n        let headers = new Headers({ 'Content-Type': 'application/json', 'authorization': 'Bearer ' + CookieService.getCookie('token') });\n        let options = new RequestOptions({ headers: headers });\n\n        this.http.delete('backend/web/v1/presentations/' + presentationId + '/slides/' + slidesId, options)\n            .map((res: Response) => res.json())\n            .catch((error: any) => Observable.throw(error.json().error || 'Server error'));\n    }\n\n}"]}