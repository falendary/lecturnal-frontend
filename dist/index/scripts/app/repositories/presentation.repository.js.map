{"version":3,"sources":["app/repositories/presentation.repository.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAyC;AACzC,8BAAmC;AACnC,sCAAsE;AAEtE,iCAA+B;AAC/B,mCAAiC;AAIjC,oDAAgD;AAGhD,6DAAyD;AAGzD,IAAa,sBAAsB;IAG/B,gCAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAC9B,CAAC;IAED,wCAAO,GAAP,UAAQ,UAA6B;QAEjC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,eAAe,EAAE,SAAS,GAAG,8BAAa,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACjI,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAEvD,IAAI,gBAAgB,GAAW,EAAE,CAAC;QAElC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACb,gBAAgB,GAAG,sBAAS,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACxE,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,8BAA8B,GAAG,gBAAgB,EAAE,OAAO,CAAC;aAC3E,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAClC,KAAK,CAAC,UAAC,KAAU,IAAK,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,EAAtD,CAAsD,CAAC,CAAC;IACvF,CAAC;IAED,yCAAQ,GAAR,UAAS,cAAsB;QAE3B,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,eAAe,EAAE,SAAS,GAAG,8BAAa,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACjI,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAEvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,+BAA+B,GAAG,cAAc,EAAE,OAAO,CAAC;aAC1E,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAClC,KAAK,CAAC,UAAC,KAAU,IAAK,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,EAAtD,CAAsD,CAAC,CAAC;IACvF,CAAC;IAED,uCAAM,GAAN,UAAO,IAAa,EAAE,cAAsB;QAExC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,eAAe,EAAE,SAAS,GAAG,8BAAa,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACjI,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAEvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,+BAA+B,GAAG,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC;aAChG,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAClC,KAAK,CAAC,UAAC,KAAU,IAAK,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,EAAtD,CAAsD,CAAC,CAAC;IACvF,CAAC;IAED,uCAAM,GAAN,UAAO,IAAa;QAEhB,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,eAAe,EAAE,SAAS,GAAG,8BAAa,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACjI,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAEvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC;aAC/E,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAClC,KAAK,CAAC,UAAC,KAAU,IAAK,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,EAAtD,CAAsD,CAAC,CAAC;IACvF,CAAC;IAED,4CAAW,GAAX,UAAY,cAAsB;QAE9B,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,eAAe,EAAE,SAAS,GAAG,8BAAa,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACjI,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAEvD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,+BAA+B,GAAG,cAAc,EAAE,OAAO,CAAC;aACtE,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAClC,KAAK,CAAC,UAAC,KAAU,IAAK,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,EAAtD,CAAsD,CAAC,CAAC;IACvF,CAAC;IAEL,6BAAC;AAAD,CA9DA,AA8DC,IAAA;AA9DY,sBAAsB;IADlC,iBAAU,EAAE;qCAIiB,WAAI;GAHrB,sBAAsB,CA8DlC;AA9DY,wDAAsB","file":"presentation.repository.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Rx';\nimport {Http, Response, Headers, RequestOptions} from '@angular/http';\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\n\nimport {IRepository} from './interfaces/IRepository';\nimport {IEntity} from '../models/interfaces/IEntity';\nimport {UrlHelper} from '../helpers/url.helper';\nimport {IQueryParameter} from '../models/interfaces/IQueryParameter';\nimport {Presentation} from '../models/Presentation';\nimport {CookieService} from '../services/cookie.service';\n\n@Injectable()\nexport class PresentationRepository implements IRepository {\n\n\n    constructor(private http: Http) {\n    }\n\n    getList(parameters: IQueryParameter[]): Observable<Presentation[]> {\n\n        let headers = new Headers({ 'Content-Type': 'application/json', 'authorization': 'Bearer ' + CookieService.getCookie('token') });\n        let options = new RequestOptions({ headers: headers });\n\n        let parametersString: string = '';\n\n        if (parameters) {\n            parametersString = UrlHelper.createQueryParamtersString(parameters);\n        }\n\n        return this.http.get('backend/web/v1/presentations' + parametersString, options)\n            .map((res: Response) => res.json())\n            .catch((error: any) => Observable.throw(error.json().error || 'Server error'));\n    }\n\n    getByKey(presentationId: number): Observable<Presentation> {\n\n        let headers = new Headers({ 'Content-Type': 'application/json', 'authorization': 'Bearer ' + CookieService.getCookie('token') });\n        let options = new RequestOptions({ headers: headers });\n\n        return this.http.get('backend/web/v1/presentations/' + presentationId, options)\n            .map((res: Response) => res.json())\n            .catch((error: any) => Observable.throw(error.json().error || 'Server error'));\n    }\n\n    update(item: IEntity, presentationId: number): Observable<Presentation> {\n\n        let headers = new Headers({ 'Content-Type': 'application/json', 'authorization': 'Bearer ' + CookieService.getCookie('token') });\n        let options = new RequestOptions({ headers: headers });\n\n        return this.http.put('backend/web/v1/presentations/' + presentationId, JSON.stringify(item), options)\n            .map((res: Response) => res.json())\n            .catch((error: any) => Observable.throw(error.json().error || 'Server error'));\n    }\n\n    create(item: IEntity): Observable<Presentation> {\n\n        let headers = new Headers({ 'Content-Type': 'application/json', 'authorization': 'Bearer ' + CookieService.getCookie('token') });\n        let options = new RequestOptions({ headers: headers });\n\n        return this.http.post('backend/web/v1/presentations', JSON.stringify(item), options)\n            .map((res: Response) => res.json())\n            .catch((error: any) => Observable.throw(error.json().error || 'Server error'));\n    }\n\n    deleteByKey(presentationId: number): void {\n\n        let headers = new Headers({ 'Content-Type': 'application/json', 'authorization': 'Bearer ' + CookieService.getCookie('token') });\n        let options = new RequestOptions({ headers: headers });\n\n        this.http.delete('backend/web/v1/presentations/' + presentationId, options)\n            .map((res: Response) => res.json())\n            .catch((error: any) => Observable.throw(error.json().error || 'Server error'));\n    }\n\n}"]}