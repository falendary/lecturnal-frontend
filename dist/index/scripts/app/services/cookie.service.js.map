{"version":3,"sources":["app/services/cookie.service.ts"],"names":[],"mappings":";;AAAA;IAAA;IAwDA,CAAC;IAtDiB,uBAAS,GAAvB,UAAwB,IAAW;QAC/B,IAAI,WAAW,GAAG,IAAI,CAAC;QACvB,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC;YAC3C,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACzC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC/B,uDAAuD;gBACvD,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;oBACvD,WAAW,GAAG,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBACpE,KAAK,CAAC;gBACV,CAAC;YACL,CAAC;QACL,CAAC;QACD,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IAEa,uBAAS,GAAvB,UAAwB,IAAW,EAAE,KAAY,EAAE,OAAW;QAE1D,kCAAkC;QAElC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QAExB,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAE9B,EAAE,CAAC,CAAC,OAAO,OAAO,IAAI,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;YACnB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,OAAO,GAAG,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC;QAClC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YACjC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAC5C,CAAC;QAED,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAElC,IAAI,aAAa,GAAG,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC;QAEvC,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC;YAC3B,aAAa,IAAI,IAAI,GAAG,QAAQ,CAAC;YACjC,IAAI,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;YAClC,EAAE,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC;gBACrB,aAAa,IAAI,GAAG,GAAG,SAAS,CAAC;YACrC,CAAC;QACL,CAAC;QAED,QAAQ,CAAC,MAAM,GAAG,aAAa,CAAC;IACpC,CAAC;IAAA,CAAC;IAEY,0BAAY,GAA1B,UAA2B,IAAY;QAEnC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,EAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,CAAA;IACpD,CAAC;IAGL,oBAAC;AAAD,CAxDA,AAwDC,IAAA;AAxDY,sCAAa","file":"cookie.service.js","sourcesContent":["export class CookieService {\n\n    public static getCookie(name:string):string {\n        let cookieValue = null;\n        if (document.cookie && document.cookie != '') {\n            let cookies = document.cookie.split(';');\n            for (let i = 0; i < cookies.length; i++) {\n                let cookie = cookies[i].trim();\n                // Does this cookie string begin with the name we want?\n                if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    }\n\n    public static setCookie(name:string, value:string, options:any):void {\n\n        //console.log('options', options);\n\n        options = options || {};\n\n        let expires = options.expires;\n\n        if (typeof expires == \"number\" && expires) {\n            let d = new Date();\n            d.setTime(expires);\n            expires = options.expires = d;\n        }\n        if (expires && expires.toUTCString) {\n            options.expires = expires.toUTCString();\n        }\n\n        value = encodeURIComponent(value);\n\n        let updatedCookie = name + \"=\" + value;\n\n        for (let propName in options) {\n            updatedCookie += \"; \" + propName;\n            let propValue = options[propName];\n            if (propValue !== true) {\n                updatedCookie += \"=\" + propValue;\n            }\n        }\n\n        document.cookie = updatedCookie;\n    };\n\n    public static deleteCookie(name: string):void {\n\n        CookieService.setCookie(name, \"\", {expires: -1})\n    }\n\n\n}"]}