{"version":3,"sources":["app/components/shell-component/shell.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA0C;AAC1C,0CAA8E;AAC9E,4DAAyD;AAEzD,oCAAkC;AAQlC,IAAa,cAAc;IAMvB,wBAAoB,MAAc,EAAE,WAAwB;QAA5D,iBAyBC;QAzBmB,WAAM,GAAN,MAAM,CAAQ;QAC9B,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAEnC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAE/B,IAAI,CAAC,MAAM,CAAC,MAAM;aACb,MAAM,CAAC,UAAC,KAAyB,IAAK,OAAA,KAAK,YAAY,wBAAe,EAAhC,CAAgC,CAAC;aACvE,SAAS,CAAC,UAAC,KAAsB;YAE9B,KAAI,CAAC,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC;YAE9B,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACnC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,KAAK,QAAQ,IAAI,KAAK,CAAC,GAAG,KAAK,eAAe,CAAC,CAAC,CAAC;oBAC1D,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBACxC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,QAAQ,IAAI,KAAK,CAAC,GAAG,IAAI,eAAe,CAAC,CAAC,CAAC;oBACxD,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gBACnC,CAAC;YACL,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAEhC,CAAC,CAAC,CAAA;IAEV,CAAC;IAEM,+BAAM,GAAb;QAEI,IAAI,MAAM,GAAG,IAAI,CAAC;QAElB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,QAAQ,IAAI,IAAI,CAAC,YAAY,IAAI,eAAe,CAAC,CAAC,CAAC;YACxE,MAAM,GAAG,KAAK,CAAC;QACnB,CAAC;QAGD,MAAM,CAAC,MAAM,CAAC;IAElB,CAAC;IAEM,+BAAM,GAAb;QACI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QAE1B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAExC,CAAC;IAEL,qBAAC;AAAD,CArDA,AAqDC,IAAA;AArDY,cAAc;IAN1B,gBAAS,CAAC;QACP,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,sBAAsB;QAChC,SAAS,EAAE,CAAC,0BAAW,CAAC;KAC3B,CAAC;qCAQ8B,eAAM,EAAe,0BAAW;GANnD,cAAc,CAqD1B;AArDY,wCAAc","file":"shell.component.js","sourcesContent":["import { Component } from '@angular/core';\nimport { Router, NavigationStart, RouteConfigLoadEnd } from '@angular/router';\nimport { AuthService } from '../../services/auth.service'\n\nimport 'rxjs/add/operator/filter';\n\n@Component({\n    selector: 'shell',\n    template: 'shell.component.html',\n    providers: [AuthService]\n})\n\nexport class ShellComponent {\n\n    private authService: AuthService;\n\n    private currentState: string;\n\n    constructor(private router: Router, authService: AuthService) {\n        console.log('ShellComponent init');\n\n        this.authService = authService;\n\n        this.router.events\n            .filter((event: RouteConfigLoadEnd) => event instanceof NavigationStart)\n            .subscribe((event: NavigationStart) => {\n\n                this.currentState = event.url;\n\n                if (!this.authService.isAuthorized()) {\n                    if (event.url !== '/login' && event.url !== '/registration') {\n                        this.router.navigateByUrl('/login');\n                    }\n                } else {\n                    if (event.url == '/login' || event.url == '/registration') {\n                        this.router.navigateByUrl('/');\n                    }\n                }\n\n                console.log('event', event);\n\n            })\n\n    }\n\n    public isAuth(): boolean {\n\n        let result = true;\n\n        if (this.currentState != '/login' && this.currentState != '/registration') {\n            result = false;\n        }\n\n\n        return result;\n\n    }\n\n    public logout(): void {\n        this.authService.logout();\n\n        this.router.navigateByUrl('/login');\n\n    }\n\n}"]}